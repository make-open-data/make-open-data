name: Integration Test

on: [push, pull_request]

jobs:
  dbt:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:16-3.5-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Setup PostgreSQL
      uses: tj-actions/install-postgresql@v3
      with:
        postgresql-version: 16

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11.5
        cache: 'pip'

    - name: Create Python virtual environment
      run: |
        python3 -m venv dbt-env
        source dbt-env/bin/activate
        echo "export PATH=$PATH" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        echo "POSTGRES_DB=postgres" >> $GITHUB_ENV
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
        echo "POSTGRES_URL=postgresql://postgres:postgres@localhost:5432/postgres" >> $GITHUB_ENV

    - name: Install PostGIS extensions
      run: |
        psql $POSTGRES_URL -c "CREATE EXTENSION IF NOT EXISTS postgis;"

    - name: Install unnaccent extensions
      run: |
        psql $POSTGRES_URL -c "CREATE EXTENSION IF NOT EXISTS unaccent;"

    - name: Check dbt project
      run: |
        dbt debug

    - name: Cache Load step
      id: cache-load
      uses: actions/cache@v4
      with:
        path: load-cache.dump
        key: load-v3-${{ hashFiles('load/storage_to_pg.yml') }}
        restore-keys: |
          load-v3-

    - name: Restore Load cache
      if: ${{ hashFiles('load-cache.dump') != '' }}
      # steps.cache-load.outputs.cache-hit is true only on exact match, we want to restore also a non-exact match (match on restore-keys), hoping it's just a new source added
      # If a complete cache refresh is needed, increment the version in the key above
      run: |
        pg_restore \
          --clean \
          --if-exists \
          --no-acl \
          --no-owner \
          -d $POSTGRES_URL < load-cache.dump

    - name: Load data from storage to tables in DB
      run: |
        python -m load

    - name: Create Load cache dump
      if: steps.cache-load.outputs.cache-hit != 'true'
      run: |
        pg_dump --no-acl --no-owner -Fc -d $POSTGRES_URL > load-cache.dump
        du -h load-cache.dump

    - name: Run dbt deps
      run: |
        dbt deps

    - name: Run dbt build
      run: |
        dbt build --threads 4
